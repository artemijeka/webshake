<?php
/**
 * Created by PhpStorm.
 * User: artem
 * Date: 02.09.18
 * Time: 12:34
 */

/**
 * V Напишите функцию, которая будет принимать на вход 3 аргумента с типом float и возвращать минимальное значение.
 *
 * V Напишите функцию, которая принимает на вход два аргумента по ссылкам и умножает каждый из них на 2.
 *
 * V Напишите функцию, считающую факториал числа (произведение целых чисел от единицы до переданного). Ну разумеется, тут никуда без рекурсии =)
 *
 * V Напишите функцию, которая будет выводить на экран целые числа от 0 до переданного значения.
 * И да, тут тоже не обойтись без рекурсии, это задание повышенной сложности. Кто справится и первым напишет
 * верное решение в комментах – тот красавчик и получит от проекта небольшой бонус. UPD: первым справился человек
 * с ником omk. Вариант его решения вы можете увидеть в комментариях.
 */


//// Не моя (omk):
//function numbers(int $x) { // 2
//    if ($x == 0) { // 2n 1n 0y
//        echo $x; // 0
//        return true; // функция на этом завершается положительно
//    }
//    $y = numbers($x - 1); // 1 0
//    echo ', ' . $x; // , 2, 1 - наоборот
//    return $y; // вернуться к вызову функции |
//}
//numbers(15);

//    function echoNumberBy0ToArg_v1($arg)
//    {
//        for ($i = 0; $arg >= $i; $i++) {
//            echo $i . '<br />';
//        }
//    }
//    echoNumberBy0ToArg_v1(2);

/**
 * Сначала идет проработка вызова функции в самой себе.
 * А только потом проработка всех выводов echo $arg, все равно какая-то пелена, что за правила отработки echo и функции
 * внутри функции? Почему echo потом отрабатывает в обратном порядке ведь числа поступали в порядке 3 2 1 0, а он их
 * после отработки выводит 0 1 2 3, интересно.
 */
//    function numberBy0ToArg_v2($arg)
//    {
//        if ($arg >= 0) {
//            $arg - numberBy0ToArg_v2($arg - 1) . '<br />';
//            echo $arg;
//        }
//    }
//
//    numberBy0ToArg_v2(3);

//    function factorialBy1ToArg($arg) // 4 3 2 1 0
//    {
//        if ($arg >= 1) {
//            return $arg + factorialBy1ToArg($arg - 1); // 5 6 10
//        }
//    }
//    echo factorialBy1ToArg(4); // 10

//    $a = 4;
//    $b = 3;
//
//    function twoArgMultiplyBy2(&$a, &$b)
//    {
//        $a = $a * 2;
//        $b = $b * 2;
//    }
//
//    twoArgMultiplyBy2($a, $b);
//    var_dump($a, $b);

//    function smallOfThreeArg(float $a, float $b, float $c)
//    {
//        if ($a < $b) {
//            if ($a < $c) {
//                return $a;
//            }
//            return $c;
//        }
//        return $b;
//    }
//    echo smallOfThreeArg(5.2, 8.6, 3.6);

/**
 * Попробуйте следующие условия:
 *
 * if (‘string’) {echo ‘Условие выполнилось’;}
 * if (0) {echo ‘Условие выполнилось’;}
 * if (null) {echo ‘Условие выполнилось’;}
 * if (5) {echo ‘Условие выполнилось’;}
 *
 * Объясните результат.
 *
 * С помощью тернарного оператора определите, является ли число чётным или нечётным и выведите результат.
 */

// * x= 2
// * n= 3
// * x= 2
// * n= 2
// * x= 2
// * n= 1
// * 8

//function power(int $x, int $n)
//{
//    print "<br />";
//    // Если сейчас степень равна единице, то возвращаем само это число
//    if ($n == 1) {
//        return $x;
//    }
//
//    // В остальных случаях - умножаем число на возведённое в степень n - 1 и возвращаем его
//    return $x * power($x, $n - 1);
//}
//
//echo power(2, 3);
